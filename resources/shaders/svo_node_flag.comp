#version 430

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

// ======================================================================
// Octree
// ======================================================================

layout(binding = 1, r32ui) uniform uimageBuffer u_octree;

uint get_index_at_level(uvec3 position, uint level)
{
	uint res = 0u;
	res |= ((position.x >> level) & 1u) << 2u;
	res |= ((position.y >> level) & 1u) << 1u;
	res |= ((position.z >> level) & 1u);
	return res;
}

// ======================================================================
// Main
// ======================================================================

layout(binding = 2, rgb10_a2ui) uniform uimageBuffer u_voxel_position;
layout(binding = 3, rgba8) uniform imageBuffer u_voxel_color;

uniform int u_max_level;
uniform int u_level;

void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= imageSize(u_voxel_position))
		return;

	uvec4 position = imageLoad(u_voxel_position, int(id));

	uint addr = 0;
	uint idx = 0;

	for (int level = u_max_level; level >= u_level; level--)
	{
		idx = get_index_at_level(position.xyz, level);
		if (level > u_level)
			addr = imageLoad(u_octree, int(addr + idx)).r & 0x7fffffff;
	}

	imageStore(u_octree, int(addr + idx), uvec4(0x80000000));
}
