#version 460

#define VERTEX_SIZE (4 + 4 + 4 + 1 + 4 + 4)

#define FACE_TOP    0
#define FACE_BOTTOM 1
#define FACE_LEFT   2
#define FACE_RIGHT  3
#define FACE_FRONT  4
#define FACE_BACK   5

layout(local_size_x = 9, local_size_y = 9, local_size_z = 9) in;

struct Vertex
{
	vec3 pos;

	vec2 uv;
	bool tint_index;
};

layout(binding = 1, rgb10_a2ui) uniform uimageBuffer u_voxel_position;
layout(binding = 2, rgba8) uniform imageBuffer u_voxel_color;

layout(binding = 4) buffer b_obb_buffer
{
	Vertex obb_buffer[];
};

layout(binding = 3) uniform atomic_uint u_alloc_i;

float edge_function(vec2 a, vec2 b, vec2 c)
{
	return (c.x - a.x) * (b.y - a.y) - (c.y - a.y) * (b.x - a.x);
}

mat4 look_at(vec3 origin, vec3 forward)
{
	vec3 right = cross(forward, vec3(0, 1, 0));
	vec3 up = cross(forward, right);

	mat4 look_at;
	look_at[0] = vec4(right, 0);
	look_at[1] = vec4(up, 0);
	look_at[2] = vec4(forward, 0);
	look_at[3] = vec4(origin, 0);
	return look_at;
}

void barycentric_weights(vec2 v0, vec2 v1, vec2 v2, vec2 p, out float w0, out float w1, out float w2)
{
	float area = edge_function(v0, v1, v2);

	w0 = edge_function(v1, v2, p);
	w1 = edge_function(v2, v0, p);
	w2 = edge_function(v0, v1, p);
}

bool interpolate(vec2 proj_v0, vec2 proj_v1, vec2 proj_v2, vec2 proj_p, Vertex v0, Vertex v1, Vertex v2, out Vertex interp)
{
	float w0, w1, w2;
	barycentric_weights(proj_v0, proj_v1, proj_v2, proj_p, w0, w1, w2);

	if (w0 < 0 || w1 < 0 || w2 < 0)
		return false;

	interp.uv = v0.uv * w0 + v1.uv * w1 + v2.uv * w2; // uv
	interp.tint_index = v0.tint_index || v1.tint_index || v2.tint_index; // tint_index (not interp)
	return true;
}

struct Plane
{
	vec3 p;
	vec3 d0, d1;
};

float point_plane_distance(vec3 point, Plane plane)
{
	vec3 coeff = cross(normalize(plane.d0), normalize(plane.d1));
	float d = -dot(coeff, plane.p);

	return abs(dot(coeff, plane.p) + d) / sqrt(length(coeff));
}

void get_face(uint obb_id, uint face_id, out Vertex v0, out Vertex v1, out Vertex v2, out Vertex v3)
{
	v0 = obb_buffer[obb_id + face_id * 4 + 0];
	v1 = obb_buffer[obb_id + face_id * 4 + 1];
	v2 = obb_buffer[obb_id + face_id * 4 + 2];
	v3 = obb_buffer[obb_id + face_id * 4 + 3];
}

bool is_colliding(vec3 _min, vec3 _max, uint obb_id)
{
	Vertex v0, v1, v2, v3;
	get_face(obb_id, 0, v0, v1, v2, v3);
	
	Vertex v4, v5, v6, v7;
	get_face(obb_id, 1, v4, v5, v6, v7);



	// SAT



	return true;
}

void main()
{
	uint obb_id = gl_WorkGroupID.x * 4 * 6;

	vec3 _min = gl_LocalInvocationID;
	vec3 _max = gl_LocalInvocationID + 1;

	if (!is_colliding(_min, _max, obb_id))
		return;

	float face_dist[6];
	float dist_sum = 0;

	for (uint face_id = 0; face_id < 6; face_id++)
	{
		Vertex v0, v1, v2, v3;
		get_face(obb_id, face_id, v0, v1, v2, v3);

		float _distance = point_plane_distance(p, Plane(v0.pos, v1.pos - v0.pos, v2.pos - v1.pos));
		dist_sum += _distance;
		face_dist[face_id] = _distance;
	}

	Vertex interp_3d;
	bool outside = true;

	for (uint face_id = 0; face_id < 6; face_id++)
	{
		Vertex v0, v1, v2, v3;
		get_face(obb_id, face_id, v0, v1, v2, v3);

		vec3 d = cross(v0.pos - v1.pos, v1.pos - v2.pos);
		mat4 proj = look_at(v0.pos, d);

		vec2 proj_v0 = (proj * vec4(v0.pos, 1)).xy;
		vec2 proj_v1 = (proj * vec4(v1.pos, 1)).xy;
		vec2 proj_v2 = (proj * vec4(v2.pos, 1)).xy;
		vec2 proj_v3 = (proj * vec4(v2.pos, 1)).xy;

		vec2 proj_p = (proj * vec4(p, 1)).xy;
		
		Vertex interp_2d;
		if (!interpolate(proj_v0, proj_v1, proj_v2, proj_p, v0, v1, v2, interp_2d) &&
			!interpolate(proj_v2, proj_v3, proj_v0, proj_p, v2, v3, v0, interp_2d))
			continue;

		float w = face_dist[face_id] / dist_sum;
		interp_3d.uv += w * interp_2d.uv;
		interp_3d.tint_index = interp_2d.tint_index;

		outside = false;
	}

	if (!outside)
	{
		uint i = atomicCounterIncrement(u_alloc_i);


	}
}
