#version 430

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(binding = 2, rgb10_a2ui) uniform uimageBuffer u_voxel_position;

// ======================================================================
// Octree
// ======================================================================

layout(binding = 1, r32ui) uniform uimageBuffer u_octree;
uniform uint u_octree_max_level;

// Gets the node at the given level where the position lies.
uint node_offset(uvec3 position, uint level)
{
	position &= uint((1 << u_octree_max_level) - 1);

	uint shift = u_octree_max_level - level;
	uint result = 0;
	result |= ((position.x >> shift) & 1) << 2;
	result |= ((position.y >> shift) & 1) << 1;
	result |= ((position.z >> shift) & 1);
	return result;
}

// Given the position, returns the value of the node at the level specified.
uint tree_lookup(uvec3 position, uint level_to_reach)
{
	uint node_val = 0;
	for (uint level = 0; level <= level_to_reach; level++)
	{
		uint node_pos = node_offset(position, level);
		node_val = imageLoad(u_octree, int(node_val + node_pos)).r;
		if (level < level_to_reach)
			node_val &= 0x7FFFFFFF;
	}
	return node_val;
}

uint vec4_to_ui32(vec4 value)
{
	uvec4 tmp = floatBitsToUint(value);
	return tmp.r << 8 * 3 | tmp.g << 8 * 2 | tmp.b << 8 | tmp.a;
}

// ======================================================================
// Main
// ======================================================================

layout(binding = 3, rgba8) uniform imageBuffer u_voxel_color;

void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= imageSize(u_voxel_position))
		return;

	uvec4 voxel_pos = imageLoad(u_voxel_position, int(id));
	vec4 voxel_col = imageLoad(u_voxel_color, int(id));

	uint node_val = tree_lookup(voxel_pos.xyz, u_octree_max_level - 1);
	uint addr = node_val & 0x7FFFFFFF;
	imageStore(u_octree, int(addr), uvec4(vec4_to_ui32(voxel_col)));
}
